{"ast":null,"code":"var _jsxFileName = \"E:\\\\ChatApplication-main\\\\react-client\\\\src\\\\components\\\\ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\n\nconst ChatRoom = () => {\n  _s();\n\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [userData, setUserData] = useState({\n    username: '',\n    password: '',\n    receivername: '',\n    connected: false,\n    aaaa: '' // Thay đổi từ message sang content\n\n  });\n  const connect = useCallback(username => {\n    let Sock = new SockJS('http://localhost:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, () => onConnected(username), onError);\n  }, []);\n  useEffect(() => {\n    const savedUserData = JSON.parse(sessionStorage.getItem('userData'));\n\n    if (savedUserData) {\n      setUserData({ ...savedUserData\n      });\n      setLoggedIn(true);\n      connect(savedUserData.username);\n    }\n  }, [connect]);\n\n  const fetchUserGroups = username => {\n    fetch(`http://localhost:8080/api/user/${username}/groups`).then(response => response.json()).then(data => {\n      setUserGroups(data);\n    }).catch(error => console.error('Error fetching user groups:', error));\n  };\n\n  const onConnected = username => {\n    setLoggedIn(true);\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + username + '/private', onPrivateMessage);\n    userJoin(username);\n  };\n\n  const userJoin = username => {\n    var chatMessage = {\n      senderName: username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setPrivateChats(new Map(privateChats));\n        }\n\n        break;\n\n      case \"MESSAGE\":\n        publicChats.push(payloadData);\n        setPublicChats([...publicChats]);\n        break;\n\n      default:\n        console.log(`Unknown status: ${payloadData.status}`);\n        break;\n    }\n  };\n\n  const onPrivateMessage = payload => {\n    console.log(payload);\n    var payloadData = JSON.parse(payload.body);\n\n    if (privateChats.get(payloadData.senderName)) {\n      privateChats.get(payloadData.senderName).push(payloadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payloadData);\n      privateChats.set(payloadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n\n  const onError = err => {\n    console.log(err);\n  };\n\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      content: value\n    });\n  };\n\n  const sendValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        content: userData.content,\n        // Đặt giá trị content\n        status: \"MESSAGE\"\n      };\n      setPublicChats(prevChats => [...prevChats, chatMessage]);\n      setUserData({ ...userData,\n        content: \"\"\n      });\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n    }\n  };\n\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        content: userData.content,\n        // Đặt giá trị content\n        status: \"MESSAGE\"\n      };\n      const newPrivateChats = new Map(privateChats);\n\n      if (userData.username !== tab) {\n        if (newPrivateChats.get(tab)) {\n          newPrivateChats.get(tab).push(chatMessage);\n        } else {\n          newPrivateChats.set(tab, [chatMessage]);\n        }\n\n        setPrivateChats(newPrivateChats);\n      }\n\n      setUserData({ ...userData,\n        content: \"\"\n      });\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n    }\n  };\n\n  const handleUsername = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      username: value\n    });\n  };\n\n  const handlePassword = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      password: value\n    });\n  };\n\n  const login = () => {\n    fetch('http://localhost:8080/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: userData.username,\n        password: userData.password\n      })\n    }).then(response => response.text()).then(data => {\n      if (data === \"Đăng nhập thành công!\") {\n        sessionStorage.setItem('userData', JSON.stringify({\n          username: userData.username\n        }));\n        setLoggedIn(true);\n        connect(userData.username);\n      } else {\n        alert(data);\n      }\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: loggedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(\"CHATROOM\");\n            },\n            className: `member ${tab === \"CHATROOM\" && \"active\"}`,\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 33\n          }, this), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(name);\n            },\n            className: `member ${tab === name && \"active\"}`,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 37\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(\"CHATROOM\");\n            },\n            className: `member ${tab === \"CHATROOM\" && \"active\"}`,\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 29\n          }, this), userGroups.map((group, index) =>\n          /*#__PURE__*/\n          // Hiển thị danh sách các nhóm\n          _jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(group.name);\n            },\n            className: `member ${tab === group.name && \"active\"}`,\n            children: group.name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 25\n      }, this), tab === \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 83\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 41\n            }, this), \" \", chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 83\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.content,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 48\n      }, this), tab !== \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [...privateChats.get(tab)].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 83\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 41\n            }, this), \" \", chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 83\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.content,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendPrivateValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 48\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"user-name\",\n        placeholder: \"Enter your name\",\n        name: \"userName\",\n        value: userData.username,\n        onChange: handleUsername,\n        margin: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Enter your password\",\n        name: \"password\",\n        value: userData.password,\n        onChange: handlePassword,\n        margin: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: login,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 13\n  }, this);\n};\n\n_s(ChatRoom, \"QEPpS933xL2Ao6eug4Q6NrNIvlc=\");\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["E:/ChatApplication-main/react-client/src/components/ChatRoom.js"],"names":["React","useEffect","useState","useCallback","over","SockJS","stompClient","ChatRoom","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","loggedIn","setLoggedIn","userData","setUserData","username","password","receivername","connected","aaaa","connect","Sock","onConnected","onError","savedUserData","JSON","parse","sessionStorage","getItem","fetchUserGroups","fetch","then","response","json","data","setUserGroups","catch","error","console","subscribe","onMessageReceived","onPrivateMessage","userJoin","chatMessage","senderName","status","send","stringify","payload","payloadData","body","get","set","push","log","list","err","handleMessage","event","value","target","content","sendValue","prevChats","sendPrivateValue","receiverName","newPrivateChats","handleUsername","handlePassword","login","method","headers","text","setItem","alert","keys","map","name","index","userGroups","group","chat"],"mappings":"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","sourcesContent":["    import React, { useEffect, useState, useCallback } from 'react';\n    import { over } from 'stompjs';\n    import SockJS from 'sockjs-client';\n\n    var stompClient = null;\n\n    const ChatRoom = () => {\n        const [privateChats, setPrivateChats] = useState(new Map());\n        const [publicChats, setPublicChats] = useState([]);\n        const [tab, setTab] = useState(\"CHATROOM\");\n        const [loggedIn, setLoggedIn] = useState(false);\n        const [userData, setUserData] = useState({\n            username: '',\n            password: '',\n            receivername: '',\n            connected: false,\n            aaaa: '' // Thay đổi từ message sang content\n        });\n\n        const connect = useCallback((username) => {\n            let Sock = new SockJS('http://localhost:8080/ws');\n            stompClient = over(Sock);\n            stompClient.connect({}, () => onConnected(username), onError);\n        }, []);\n\n        useEffect(() => {\n            const savedUserData = JSON.parse(sessionStorage.getItem('userData'));\n            if (savedUserData) {\n                setUserData({ ...savedUserData });\n                setLoggedIn(true);\n                connect(savedUserData.username);\n            }\n        }, [connect]);\n        \n    const fetchUserGroups = (username) => {\n        fetch(`http://localhost:8080/api/user/${username}/groups`)\n            .then(response => response.json())\n            .then(data => {\n                setUserGroups(data);\n            })\n            .catch(error => console.error('Error fetching user groups:', error));\n    };\n\n        const onConnected = (username) => {\n            setLoggedIn(true);\n            stompClient.subscribe('/chatroom/public', onMessageReceived);\n            stompClient.subscribe('/user/' + username + '/private', onPrivateMessage);\n            userJoin(username);\n        };\n\n        const userJoin = (username) => {\n            var chatMessage = {\n                senderName: username,\n                status: \"JOIN\"\n            };\n            stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n        };\n\n        const onMessageReceived = (payload) => {\n            var payloadData = JSON.parse(payload.body);\n            switch (payloadData.status) {\n                case \"JOIN\":\n                    if (!privateChats.get(payloadData.senderName)) {\n                        privateChats.set(payloadData.senderName, []);\n                        setPrivateChats(new Map(privateChats));\n                    }\n                    break;\n                case \"MESSAGE\":\n                    publicChats.push(payloadData);\n                    setPublicChats([...publicChats]);\n                    break;\n                default:\n                    console.log(`Unknown status: ${payloadData.status}`);\n                    break;\n            }\n        };\n\n        const onPrivateMessage = (payload) => {\n            console.log(payload);\n            var payloadData = JSON.parse(payload.body);\n            if (privateChats.get(payloadData.senderName)) {\n                privateChats.get(payloadData.senderName).push(payloadData);\n                setPrivateChats(new Map(privateChats));\n            } else {\n                let list = [];\n                list.push(payloadData);\n                privateChats.set(payloadData.senderName, list);\n                setPrivateChats(new Map(privateChats));\n            }\n        };\n\n        const onError = (err) => {\n            console.log(err);\n        };\n\n        const handleMessage = (event) => {\n            const { value } = event.target;\n            setUserData({ ...userData, content: value });\n        };\n\n        const sendValue = () => {\n            if (stompClient) {\n                var chatMessage = {\n                    senderName: userData.username,\n                    content: userData.content, // Đặt giá trị content\n                    status: \"MESSAGE\"\n                };\n\n                setPublicChats(prevChats => [...prevChats, chatMessage]);\n                setUserData({ ...userData, content: \"\" });\n                stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n            }\n        };\n\n        const sendPrivateValue = () => {\n            if (stompClient) {\n                var chatMessage = {\n                    senderName: userData.username,\n                    receiverName: tab,\n                    content: userData.content, // Đặt giá trị content\n                    status: \"MESSAGE\"\n                };\n\n                const newPrivateChats = new Map(privateChats);\n                if (userData.username !== tab) {\n                    if (newPrivateChats.get(tab)) {\n                        newPrivateChats.get(tab).push(chatMessage);\n                    } else {\n                        newPrivateChats.set(tab, [chatMessage]);\n                    }\n                    setPrivateChats(newPrivateChats);\n                }\n\n                setUserData({ ...userData, content: \"\" });\n                stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n            }\n        };\n\n        const handleUsername = (event) => {\n            const { value } = event.target;\n            setUserData({ ...userData, username: value });\n        };\n\n        const handlePassword = (event) => {\n            const { value } = event.target;\n            setUserData({ ...userData, password: value });\n        };\n\n        const login = () => {\n            fetch('http://localhost:8080/login', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ username: userData.username, password: userData.password }),\n            })\n            .then(response => response.text())\n            .then(data => {\n                if (data === \"Đăng nhập thành công!\") {\n                    sessionStorage.setItem('userData', JSON.stringify({ username: userData.username }));\n                    setLoggedIn(true);\n                    connect(userData.username);\n                } else {\n                    alert(data);\n                }\n            })\n            .catch((error) => {\n                console.error('Error:', error);\n            });\n        };\n\n        return (\n            <div className=\"container\">\n                {loggedIn ?\n                    <div className=\"chat-box\">\n                        <div className=\"member-list\">\n                            <ul>\n                                <li onClick={() => { setTab(\"CHATROOM\") }} className={`member ${tab === \"CHATROOM\" && \"active\"}`}>Chatroom</li>\n                                {[...privateChats.keys()].map((name, index) => (\n                                    <li onClick={() => { setTab(name) }} className={`member ${tab === name && \"active\"}`} key={index}>{name}</li>\n                                ))}\n                            </ul>\n                            <ul>\n                            <li onClick={() => { setTab(\"CHATROOM\") }} className={`member ${tab === \"CHATROOM\" && \"active\"}`}>Chatroom</li>\n                            {userGroups.map((group, index) => ( // Hiển thị danh sách các nhóm\n                                <li onClick={() => { setTab(group.name) }} className={`member ${tab === group.name && \"active\"}`} key={index}>{group.name}</li>\n                            ))}\n                        </ul>\n                        </div>\n                        {tab === \"CHATROOM\" && <div className=\"chat-content\">\n                            <ul className=\"chat-messages\">\n                                {publicChats.map((chat, index) => (\n                                    <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                                        {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\n                                        <div className=\"message-data\">{chat.content}</div> {/* Sử dụng content */}\n                                        {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\n                                    </li>\n                                ))}\n                            </ul>\n\n                            <div className=\"send-message\">\n                                <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.content} onChange={handleMessage} />\n                                <button type=\"button\" className=\"send-button\" onClick={sendValue}>send</button>\n                            </div>\n                        </div>}\n                        {tab !== \"CHATROOM\" && <div className=\"chat-content\">\n                            <ul className=\"chat-messages\">\n                                {[...privateChats.get(tab)].map((chat, index) => (\n                                    <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                                        {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\n                                        <div className=\"message-data\">{chat.content}</div> {/* Sử dụng content */}\n                                        {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\n                                    </li>\n                                ))}\n                            </ul>\n\n                            <div className=\"send-message\">\n                                <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.content} onChange={handleMessage} />\n                                <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>send</button>\n                            </div>\n                        </div>}\n                    </div>\n                    :\n                    <div className=\"login\">\n                        <input\n                            id=\"user-name\"\n                            placeholder=\"Enter your name\"\n                            name=\"userName\"\n                            value={userData.username}\n                            onChange={handleUsername}\n                            margin=\"normal\"\n                        />\n                        <input\n                            type=\"password\"\n                            placeholder=\"Enter your password\"\n                            name=\"password\"\n                            value={userData.password}\n                            onChange={handlePassword}\n                            margin=\"normal\"\n                        />\n                        <button type=\"button\" onClick={login}>\n                            Login\n                        </button>\n                    </div>}\n            </div>\n        );\n\n    };\n\n    export default ChatRoom;\n"]},"metadata":{},"sourceType":"module"}