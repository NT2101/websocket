{"ast":null,"code":"var _jsxFileName = \"E:\\\\ChatApplication-main\\\\react-client\\\\src\\\\components\\\\ChatRoom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\n\nconst ChatRoom = () => {\n  _s();\n\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [groupChats, setGroupChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [userGroups, setUserGroups] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [userData, setUserData] = useState({\n    username: '',\n    password: '',\n    receivername: '',\n    connected: false,\n    content: '' // Changed from aaaa to content\n\n  });\n  const connect = useCallback(username => {\n    let Sock = new SockJS('http://localhost:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, () => onConnected(username), onError);\n  }, []);\n  useEffect(() => {\n    const savedUserData = JSON.parse(sessionStorage.getItem('userData'));\n\n    if (savedUserData) {\n      setUserData({ ...savedUserData\n      });\n      setLoggedIn(true);\n      connect(savedUserData.username);\n      fetchUserGroups(savedUserData.username); // Fetch user groups when the user logs in\n    }\n  }, [connect]);\n\n  const fetchUserGroups = username => {\n    fetch(`http://localhost:8080/api/user/${username}/groups`).then(response => response.json()).then(data => {\n      setUserGroups(data);\n    }).catch(error => console.error('Error fetching user groups:', error));\n  };\n\n  const onConnected = username => {\n    setLoggedIn(true);\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + username + '/private', onPrivateMessage);\n    stompClient.subscribe('/group/' + username, onGroupMessage);\n    userJoin(username);\n  };\n\n  const userJoin = username => {\n    var chatMessage = {\n      senderName: username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      case \"JOIN\":\n        // Handle join message\n        break;\n\n      case \"MESSAGE\":\n        // Handle public chat message\n        setPublicChats(prevChats => [...prevChats, payloadData]);\n        break;\n\n      default:\n        console.log(`Unknown status: ${payloadData.status}`);\n        break;\n    }\n  };\n\n  const onPrivateMessage = payload => {\n    var payloadData = JSON.parse(payload.body);\n    updatePrivateChats(payloadData);\n  };\n\n  const onGroupMessage = payload => {\n    var payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      case \"MESSAGE\":\n        // Handle group chat message\n        updateGroupChats(payloadData);\n        break;\n\n      default:\n        console.log(`Unknown status: ${payloadData.status}`);\n        break;\n    }\n  };\n\n  const updatePrivateChats = message => {\n    const senderName = message.senderName;\n    const newPrivateChats = new Map(privateChats);\n\n    if (newPrivateChats.get(senderName)) {\n      newPrivateChats.get(senderName).push(message);\n    } else {\n      newPrivateChats.set(senderName, [message]);\n    }\n\n    setPrivateChats(newPrivateChats);\n  };\n\n  const updateGroupChats = message => {\n    const groupName = message.groupName;\n    const newGroupChats = new Map(groupChats);\n\n    if (!newGroupChats.get(groupName)) {\n      newGroupChats.set(groupName, []);\n    }\n\n    newGroupChats.get(groupName).push(message);\n    setGroupChats(newGroupChats);\n  };\n\n  const onError = err => {\n    console.log(err);\n  };\n\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      content: value\n    });\n  };\n\n  const sendValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        content: userData.content,\n        // Set the value of content\n        status: \"MESSAGE\"\n      };\n      setPublicChats(prevChats => [...prevChats, chatMessage]);\n      setUserData({ ...userData,\n        content: \"\"\n      });\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n    }\n  };\n\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        content: userData.content,\n        // Set the value of content\n        status: \"MESSAGE\"\n      };\n      const newPrivateChats = new Map(privateChats);\n\n      if (userData.username !== tab) {\n        if (newPrivateChats.get(tab)) {\n          newPrivateChats.get(tab).push(chatMessage);\n        } else {\n          newPrivateChats.set(tab, [chatMessage]);\n        }\n\n        setPrivateChats(newPrivateChats);\n      }\n\n      setUserData({ ...userData,\n        content: \"\"\n      });\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n    }\n  };\n\n  const sendGroupValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        groupName: tab,\n        // Add groupName to specify the receiving group\n        content: userData.content,\n        status: \"MESSAGE\"\n      };\n      stompClient.send(\"/app/group-message\", {}, JSON.stringify(chatMessage)); // Clear the message content after sending\n\n      setUserData({ ...userData,\n        content: \"\"\n      });\n    }\n  };\n\n  const handleUsername = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      username: value\n    });\n  };\n\n  const handlePassword = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      password: value\n    });\n  };\n\n  const login = () => {\n    fetch('http://localhost:8080/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: userData.username,\n        password: userData.password\n      })\n    }).then(response => response.text()).then(data => {\n      if (data === \"Đăng nhập thành công!\") {\n        sessionStorage.setItem('userData', JSON.stringify({\n          username: userData.username\n        }));\n        setLoggedIn(true);\n        connect(userData.username);\n      } else {\n        alert(data);\n      }\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: loggedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(\"CHATROOM\");\n            },\n            className: `member ${tab === \"CHATROOM\" && \"active\"}`,\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 29\n          }, this), userGroups.map((group, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(group.name);\n            },\n            className: `member ${tab === group.name && \"active\"}`,\n            children: group.name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 33\n          }, this)), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(name);\n            },\n            className: `member ${tab === name && \"active\"}`,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 21\n      }, this), tab === \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 79\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 37\n            }, this), \" \", chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 79\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.content,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 44\n      }, this), tab !== \"CHATROOM\" && groupChats.has(tab) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [...(groupChats.get(tab) || [])].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 79\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 37\n            }, this), \" \", chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 79\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.content,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendGroupValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 67\n      }, this), tab !== \"CHATROOM\" && privateChats.has(tab) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [...(privateChats.get(tab) || [])].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 79\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 37\n            }, this), \" \", chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 79\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.content,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendPrivateValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 69\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"user-name\",\n        placeholder: \"Enter your name\",\n        name: \"userName\",\n        value: userData.username,\n        onChange: handleUsername,\n        margin: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Enter your password\",\n        name: \"password\",\n        value: userData.password,\n        onChange: handlePassword,\n        margin: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: login,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChatRoom, \"q1KudJ6QZckOcvjK7gmHRyKTZU0=\");\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["E:/ChatApplication-main/react-client/src/components/ChatRoom.js"],"names":["React","useEffect","useState","useCallback","over","SockJS","stompClient","ChatRoom","privateChats","setPrivateChats","Map","groupChats","setGroupChats","publicChats","setPublicChats","userGroups","setUserGroups","tab","setTab","loggedIn","setLoggedIn","userData","setUserData","username","password","receivername","connected","content","connect","Sock","onConnected","onError","savedUserData","JSON","parse","sessionStorage","getItem","fetchUserGroups","fetch","then","response","json","data","catch","error","console","subscribe","onMessageReceived","onPrivateMessage","onGroupMessage","userJoin","chatMessage","senderName","status","send","stringify","payload","payloadData","body","prevChats","log","updatePrivateChats","updateGroupChats","message","newPrivateChats","get","push","set","groupName","newGroupChats","err","handleMessage","event","value","target","sendValue","sendPrivateValue","receiverName","sendGroupValue","handleUsername","handlePassword","login","method","headers","text","setItem","alert","map","group","index","name","keys","chat","has"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,SAASC,IAAT,QAAqB,SAArB;AACA,OAAOC,MAAP,MAAmB,eAAnB;;AAEA,IAAIC,WAAW,GAAG,IAAlB;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,IAAIQ,GAAJ,EAAD,CAAhD;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,IAAIQ,GAAJ,EAAD,CAA5C;AACA,QAAM,CAACG,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACe,GAAD,EAAMC,MAAN,IAAgBhB,QAAQ,CAAC,UAAD,CAA9B;AACA,QAAM,CAACiB,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACmB,QAAD,EAAWC,WAAX,IAA0BpB,QAAQ,CAAC;AACrCqB,IAAAA,QAAQ,EAAE,EAD2B;AAErCC,IAAAA,QAAQ,EAAE,EAF2B;AAGrCC,IAAAA,YAAY,EAAE,EAHuB;AAIrCC,IAAAA,SAAS,EAAE,KAJ0B;AAKrCC,IAAAA,OAAO,EAAE,EAL4B,CAKzB;;AALyB,GAAD,CAAxC;AAQA,QAAMC,OAAO,GAAGzB,WAAW,CAAEoB,QAAD,IAAc;AACtC,QAAIM,IAAI,GAAG,IAAIxB,MAAJ,CAAW,0BAAX,CAAX;AACAC,IAAAA,WAAW,GAAGF,IAAI,CAACyB,IAAD,CAAlB;AACAvB,IAAAA,WAAW,CAACsB,OAAZ,CAAoB,EAApB,EAAwB,MAAME,WAAW,CAACP,QAAD,CAAzC,EAAqDQ,OAArD;AACH,GAJ0B,EAIxB,EAJwB,CAA3B;AAMA9B,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM+B,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAX,CAAtB;;AACA,QAAIJ,aAAJ,EAAmB;AACfV,MAAAA,WAAW,CAAC,EAAE,GAAGU;AAAL,OAAD,CAAX;AACAZ,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAQ,MAAAA,OAAO,CAACI,aAAa,CAACT,QAAf,CAAP;AACAc,MAAAA,eAAe,CAACL,aAAa,CAACT,QAAf,CAAf,CAJe,CAI0B;AAC5C;AACJ,GARQ,EAQN,CAACK,OAAD,CARM,CAAT;;AAUA,QAAMS,eAAe,GAAId,QAAD,IAAc;AAClCe,IAAAA,KAAK,CAAE,kCAAiCf,QAAS,SAA5C,CAAL,CACKgB,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUG,IAAI,IAAI;AACV1B,MAAAA,aAAa,CAAC0B,IAAD,CAAb;AACH,KAJL,EAKKC,KALL,CAKWC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAc,6BAAd,EAA6CA,KAA7C,CALpB;AAMH,GAPD;;AASA,QAAMd,WAAW,GAAIP,QAAD,IAAc;AAC9BH,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAd,IAAAA,WAAW,CAACwC,SAAZ,CAAsB,kBAAtB,EAA0CC,iBAA1C;AACAzC,IAAAA,WAAW,CAACwC,SAAZ,CAAsB,WAAWvB,QAAX,GAAsB,UAA5C,EAAwDyB,gBAAxD;AACA1C,IAAAA,WAAW,CAACwC,SAAZ,CAAsB,YAAYvB,QAAlC,EAA4C0B,cAA5C;AACAC,IAAAA,QAAQ,CAAC3B,QAAD,CAAR;AACH,GAND;;AAQA,QAAM2B,QAAQ,GAAI3B,QAAD,IAAc;AAC3B,QAAI4B,WAAW,GAAG;AACdC,MAAAA,UAAU,EAAE7B,QADE;AAEd8B,MAAAA,MAAM,EAAE;AAFM,KAAlB;AAIA/C,IAAAA,WAAW,CAACgD,IAAZ,CAAiB,cAAjB,EAAiC,EAAjC,EAAqCrB,IAAI,CAACsB,SAAL,CAAeJ,WAAf,CAArC;AACH,GAND;;AAQA,QAAMJ,iBAAiB,GAAIS,OAAD,IAAa;AACnC,QAAIC,WAAW,GAAGxB,IAAI,CAACC,KAAL,CAAWsB,OAAO,CAACE,IAAnB,CAAlB;;AACA,YAAQD,WAAW,CAACJ,MAApB;AACI,WAAK,MAAL;AACI;AACA;;AACJ,WAAK,SAAL;AACI;AACAvC,QAAAA,cAAc,CAAC6C,SAAS,IAAI,CAAC,GAAGA,SAAJ,EAAeF,WAAf,CAAd,CAAd;AACA;;AACJ;AACIZ,QAAAA,OAAO,CAACe,GAAR,CAAa,mBAAkBH,WAAW,CAACJ,MAAO,EAAlD;AACA;AAVR;AAYH,GAdD;;AAgBA,QAAML,gBAAgB,GAAIQ,OAAD,IAAa;AAClC,QAAIC,WAAW,GAAGxB,IAAI,CAACC,KAAL,CAAWsB,OAAO,CAACE,IAAnB,CAAlB;AACAG,IAAAA,kBAAkB,CAACJ,WAAD,CAAlB;AACH,GAHD;;AAKA,QAAMR,cAAc,GAAIO,OAAD,IAAa;AAChC,QAAIC,WAAW,GAAGxB,IAAI,CAACC,KAAL,CAAWsB,OAAO,CAACE,IAAnB,CAAlB;;AACA,YAAQD,WAAW,CAACJ,MAApB;AACI,WAAK,SAAL;AACI;AACAS,QAAAA,gBAAgB,CAACL,WAAD,CAAhB;AACA;;AACJ;AACIZ,QAAAA,OAAO,CAACe,GAAR,CAAa,mBAAkBH,WAAW,CAACJ,MAAO,EAAlD;AACA;AAPR;AASH,GAXD;;AAaA,QAAMQ,kBAAkB,GAAIE,OAAD,IAAa;AACpC,UAAMX,UAAU,GAAGW,OAAO,CAACX,UAA3B;AACA,UAAMY,eAAe,GAAG,IAAItD,GAAJ,CAAQF,YAAR,CAAxB;;AACA,QAAIwD,eAAe,CAACC,GAAhB,CAAoBb,UAApB,CAAJ,EAAqC;AACjCY,MAAAA,eAAe,CAACC,GAAhB,CAAoBb,UAApB,EAAgCc,IAAhC,CAAqCH,OAArC;AACH,KAFD,MAEO;AACHC,MAAAA,eAAe,CAACG,GAAhB,CAAoBf,UAApB,EAAgC,CAACW,OAAD,CAAhC;AACH;;AACDtD,IAAAA,eAAe,CAACuD,eAAD,CAAf;AACH,GATD;;AAWA,QAAMF,gBAAgB,GAAIC,OAAD,IAAa;AAClC,UAAMK,SAAS,GAAGL,OAAO,CAACK,SAA1B;AACA,UAAMC,aAAa,GAAG,IAAI3D,GAAJ,CAAQC,UAAR,CAAtB;;AACA,QAAI,CAAC0D,aAAa,CAACJ,GAAd,CAAkBG,SAAlB,CAAL,EAAmC;AAC/BC,MAAAA,aAAa,CAACF,GAAd,CAAkBC,SAAlB,EAA6B,EAA7B;AACH;;AACDC,IAAAA,aAAa,CAACJ,GAAd,CAAkBG,SAAlB,EAA6BF,IAA7B,CAAkCH,OAAlC;AACAnD,IAAAA,aAAa,CAACyD,aAAD,CAAb;AACH,GARD;;AAUA,QAAMtC,OAAO,GAAIuC,GAAD,IAAS;AACrBzB,IAAAA,OAAO,CAACe,GAAR,CAAYU,GAAZ;AACH,GAFD;;AAIA,QAAMC,aAAa,GAAIC,KAAD,IAAW;AAC7B,UAAM;AAAEC,MAAAA;AAAF,QAAYD,KAAK,CAACE,MAAxB;AACApD,IAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeM,MAAAA,OAAO,EAAE8C;AAAxB,KAAD,CAAX;AACH,GAHD;;AAKA,QAAME,SAAS,GAAG,MAAM;AACpB,QAAIrE,WAAJ,EAAiB;AACb,UAAI6C,WAAW,GAAG;AACdC,QAAAA,UAAU,EAAE/B,QAAQ,CAACE,QADP;AAEdI,QAAAA,OAAO,EAAEN,QAAQ,CAACM,OAFJ;AAEa;AAC3B0B,QAAAA,MAAM,EAAE;AAHM,OAAlB;AAMAvC,MAAAA,cAAc,CAAC6C,SAAS,IAAI,CAAC,GAAGA,SAAJ,EAAeR,WAAf,CAAd,CAAd;AACA7B,MAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeM,QAAAA,OAAO,EAAE;AAAxB,OAAD,CAAX;AACArB,MAAAA,WAAW,CAACgD,IAAZ,CAAiB,cAAjB,EAAiC,EAAjC,EAAqCrB,IAAI,CAACsB,SAAL,CAAeJ,WAAf,CAArC;AACH;AACJ,GAZD;;AAcA,QAAMyB,gBAAgB,GAAG,MAAM;AAC3B,QAAItE,WAAJ,EAAiB;AACb,UAAI6C,WAAW,GAAG;AACdC,QAAAA,UAAU,EAAE/B,QAAQ,CAACE,QADP;AAEdsD,QAAAA,YAAY,EAAE5D,GAFA;AAGdU,QAAAA,OAAO,EAAEN,QAAQ,CAACM,OAHJ;AAGa;AAC3B0B,QAAAA,MAAM,EAAE;AAJM,OAAlB;AAOA,YAAMW,eAAe,GAAG,IAAItD,GAAJ,CAAQF,YAAR,CAAxB;;AACA,UAAIa,QAAQ,CAACE,QAAT,KAAsBN,GAA1B,EAA+B;AAC3B,YAAI+C,eAAe,CAACC,GAAhB,CAAoBhD,GAApB,CAAJ,EAA8B;AAC1B+C,UAAAA,eAAe,CAACC,GAAhB,CAAoBhD,GAApB,EAAyBiD,IAAzB,CAA8Bf,WAA9B;AACH,SAFD,MAEO;AACHa,UAAAA,eAAe,CAACG,GAAhB,CAAoBlD,GAApB,EAAyB,CAACkC,WAAD,CAAzB;AACH;;AACD1C,QAAAA,eAAe,CAACuD,eAAD,CAAf;AACH;;AAED1C,MAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeM,QAAAA,OAAO,EAAE;AAAxB,OAAD,CAAX;AACArB,MAAAA,WAAW,CAACgD,IAAZ,CAAiB,sBAAjB,EAAyC,EAAzC,EAA6CrB,IAAI,CAACsB,SAAL,CAAeJ,WAAf,CAA7C;AACH;AACJ,GAtBD;;AAwBA,QAAM2B,cAAc,GAAG,MAAM;AACzB,QAAIxE,WAAJ,EAAiB;AACb,UAAI6C,WAAW,GAAG;AACdC,QAAAA,UAAU,EAAE/B,QAAQ,CAACE,QADP;AAEd6C,QAAAA,SAAS,EAAEnD,GAFG;AAEE;AAChBU,QAAAA,OAAO,EAAEN,QAAQ,CAACM,OAHJ;AAId0B,QAAAA,MAAM,EAAE;AAJM,OAAlB;AAOA/C,MAAAA,WAAW,CAACgD,IAAZ,CAAiB,oBAAjB,EAAuC,EAAvC,EAA2CrB,IAAI,CAACsB,SAAL,CAAeJ,WAAf,CAA3C,EARa,CAUb;;AACA7B,MAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeM,QAAAA,OAAO,EAAE;AAAxB,OAAD,CAAX;AACH;AACJ,GAdD;;AAgBA,QAAMoD,cAAc,GAAIP,KAAD,IAAW;AAC9B,UAAM;AAAEC,MAAAA;AAAF,QAAYD,KAAK,CAACE,MAAxB;AACApD,IAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeE,MAAAA,QAAQ,EAAEkD;AAAzB,KAAD,CAAX;AACH,GAHD;;AAKA,QAAMO,cAAc,GAAIR,KAAD,IAAW;AAC9B,UAAM;AAAEC,MAAAA;AAAF,QAAYD,KAAK,CAACE,MAAxB;AACApD,IAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeG,MAAAA,QAAQ,EAAEiD;AAAzB,KAAD,CAAX;AACH,GAHD;;AAKA,QAAMQ,KAAK,GAAG,MAAM;AAChB3C,IAAAA,KAAK,CAAC,6BAAD,EAAgC;AACjC4C,MAAAA,MAAM,EAAE,MADyB;AAEjCC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAFwB;AAKjCzB,MAAAA,IAAI,EAAEzB,IAAI,CAACsB,SAAL,CAAe;AAAEhC,QAAAA,QAAQ,EAAEF,QAAQ,CAACE,QAArB;AAA+BC,QAAAA,QAAQ,EAAEH,QAAQ,CAACG;AAAlD,OAAf;AAL2B,KAAhC,CAAL,CAOKe,IAPL,CAOUC,QAAQ,IAAIA,QAAQ,CAAC4C,IAAT,EAPtB,EAQK7C,IARL,CAQUG,IAAI,IAAI;AACV,UAAIA,IAAI,KAAK,uBAAb,EAAsC;AAClCP,QAAAA,cAAc,CAACkD,OAAf,CAAuB,UAAvB,EAAmCpD,IAAI,CAACsB,SAAL,CAAe;AAAEhC,UAAAA,QAAQ,EAAEF,QAAQ,CAACE;AAArB,SAAf,CAAnC;AACAH,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAQ,QAAAA,OAAO,CAACP,QAAQ,CAACE,QAAV,CAAP;AACH,OAJD,MAIO;AACH+D,QAAAA,KAAK,CAAC5C,IAAD,CAAL;AACH;AACJ,KAhBL,EAiBKC,KAjBL,CAiBYC,KAAD,IAAW;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,QAAd,EAAwBA,KAAxB;AACH,KAnBL;AAoBH,GArBD;;AAuBA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,cACKzB,QAAQ,gBACL;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,+BACI;AAAA,kCACI;AAAI,YAAA,OAAO,EAAE,MAAM;AAAED,cAAAA,MAAM,CAAC,UAAD,CAAN;AAAoB,aAAzC;AAA2C,YAAA,SAAS,EAAG,UAASD,GAAG,KAAK,UAAR,IAAsB,QAAS,EAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEKF,UAAU,CAACwE,GAAX,CAAe,CAACC,KAAD,EAAQC,KAAR,kBACZ;AAAI,YAAA,OAAO,EAAE,MAAM;AAAEvE,cAAAA,MAAM,CAACsE,KAAK,CAACE,IAAP,CAAN;AAAoB,aAAzC;AAA2C,YAAA,SAAS,EAAG,UAASzE,GAAG,KAAKuE,KAAK,CAACE,IAAd,IAAsB,QAAS,EAA/F;AAAA,sBAA+GF,KAAK,CAACE;AAArH,aAAuGD,KAAvG;AAAA;AAAA;AAAA;AAAA,kBADH,CAFL,EAKK,CAAC,GAAGjF,YAAY,CAACmF,IAAb,EAAJ,EAAyBJ,GAAzB,CAA6B,CAACG,IAAD,EAAOD,KAAP,kBAC1B;AAAI,YAAA,OAAO,EAAE,MAAM;AAAEvE,cAAAA,MAAM,CAACwE,IAAD,CAAN;AAAc,aAAnC;AAAqC,YAAA,SAAS,EAAG,UAASzE,GAAG,KAAKyE,IAAR,IAAgB,QAAS,EAAnF;AAAA,sBAAmGA;AAAnG,aAA2FD,KAA3F;AAAA;AAAA;AAAA;AAAA,kBADH,CALL;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,EAYKxE,GAAG,KAAK,UAAR,iBAAsB;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,gCACnB;AAAI,UAAA,SAAS,EAAC,eAAd;AAAA,oBACKJ,WAAW,CAAC0E,GAAZ,CAAgB,CAACK,IAAD,EAAOH,KAAP,kBACb;AAAI,YAAA,SAAS,EAAG,WAAUG,IAAI,CAACxC,UAAL,KAAoB/B,QAAQ,CAACE,QAA7B,IAAyC,MAAO,EAA1E;AAAA,uBACKqE,IAAI,CAACxC,UAAL,KAAoB/B,QAAQ,CAACE,QAA7B,iBAAyC;AAAK,cAAA,SAAS,EAAC,QAAf;AAAA,wBAAyBqE,IAAI,CAACxC;AAA9B;AAAA;AAAA;AAAA;AAAA,oBAD9C,eAEI;AAAK,cAAA,SAAS,EAAC,cAAf;AAAA,wBAA+BwC,IAAI,CAACjE;AAApC;AAAA;AAAA;AAAA;AAAA,oBAFJ,OAGKiE,IAAI,CAACxC,UAAL,KAAoB/B,QAAQ,CAACE,QAA7B,iBAAyC;AAAK,cAAA,SAAS,EAAC,aAAf;AAAA,wBAA8BqE,IAAI,CAACxC;AAAnC;AAAA;AAAA;AAAA;AAAA,oBAH9C;AAAA,aAAkFqC,KAAlF;AAAA;AAAA;AAAA;AAAA,kBADH;AADL;AAAA;AAAA;AAAA;AAAA,gBADmB,eAWnB;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACI;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,SAAS,EAAC,eAA7B;AAA6C,YAAA,WAAW,EAAC,mBAAzD;AAA6E,YAAA,KAAK,EAAEpE,QAAQ,CAACM,OAA7F;AAAsG,YAAA,QAAQ,EAAE4C;AAAhH;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,SAAS,EAAC,aAAhC;AAA8C,YAAA,OAAO,EAAEI,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXmB;AAAA;AAAA;AAAA;AAAA;AAAA,cAZ3B,EA4BK1D,GAAG,KAAK,UAAR,IAAsBN,UAAU,CAACkF,GAAX,CAAe5E,GAAf,CAAtB,iBAA6C;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,gCAC1C;AAAI,UAAA,SAAS,EAAC,eAAd;AAAA,oBACK,CAAC,IAAIN,UAAU,CAACsD,GAAX,CAAehD,GAAf,KAAuB,EAA3B,CAAD,EAAiCsE,GAAjC,CAAqC,CAACK,IAAD,EAAOH,KAAP,kBAClC;AAAI,YAAA,SAAS,EAAG,WAAUG,IAAI,CAACxC,UAAL,KAAoB/B,QAAQ,CAACE,QAA7B,IAAyC,MAAO,EAA1E;AAAA,uBACKqE,IAAI,CAACxC,UAAL,KAAoB/B,QAAQ,CAACE,QAA7B,iBAAyC;AAAK,cAAA,SAAS,EAAC,QAAf;AAAA,wBAAyBqE,IAAI,CAACxC;AAA9B;AAAA;AAAA;AAAA;AAAA,oBAD9C,eAEI;AAAK,cAAA,SAAS,EAAC,cAAf;AAAA,wBAA+BwC,IAAI,CAACjE;AAApC;AAAA;AAAA;AAAA;AAAA,oBAFJ,OAGKiE,IAAI,CAACxC,UAAL,KAAoB/B,QAAQ,CAACE,QAA7B,iBAAyC;AAAK,cAAA,SAAS,EAAC,aAAf;AAAA,wBAA8BqE,IAAI,CAACxC;AAAnC;AAAA;AAAA;AAAA;AAAA,oBAH9C;AAAA,aAAkFqC,KAAlF;AAAA;AAAA;AAAA;AAAA,kBADH;AADL;AAAA;AAAA;AAAA;AAAA,gBAD0C,eAW1C;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACI;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,SAAS,EAAC,eAA7B;AAA6C,YAAA,WAAW,EAAC,mBAAzD;AAA6E,YAAA,KAAK,EAAEpE,QAAQ,CAACM,OAA7F;AAAsG,YAAA,QAAQ,EAAE4C;AAAhH;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,SAAS,EAAC,aAAhC;AAA8C,YAAA,OAAO,EAAEO,cAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAX0C;AAAA;AAAA;AAAA;AAAA;AAAA,cA5BlD,EA4CK7D,GAAG,KAAK,UAAR,IAAsBT,YAAY,CAACqF,GAAb,CAAiB5E,GAAjB,CAAtB,iBAA+C;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,gCAC5C;AAAI,UAAA,SAAS,EAAC,eAAd;AAAA,oBACK,CAAC,IAAIT,YAAY,CAACyD,GAAb,CAAiBhD,GAAjB,KAAyB,EAA7B,CAAD,EAAmCsE,GAAnC,CAAuC,CAACK,IAAD,EAAOH,KAAP,kBACpC;AAAI,YAAA,SAAS,EAAG,WAAUG,IAAI,CAACxC,UAAL,KAAoB/B,QAAQ,CAACE,QAA7B,IAAyC,MAAO,EAA1E;AAAA,uBACKqE,IAAI,CAACxC,UAAL,KAAoB/B,QAAQ,CAACE,QAA7B,iBAAyC;AAAK,cAAA,SAAS,EAAC,QAAf;AAAA,wBAAyBqE,IAAI,CAACxC;AAA9B;AAAA;AAAA;AAAA;AAAA,oBAD9C,eAEI;AAAK,cAAA,SAAS,EAAC,cAAf;AAAA,wBAA+BwC,IAAI,CAACjE;AAApC;AAAA;AAAA;AAAA;AAAA,oBAFJ,OAGKiE,IAAI,CAACxC,UAAL,KAAoB/B,QAAQ,CAACE,QAA7B,iBAAyC;AAAK,cAAA,SAAS,EAAC,aAAf;AAAA,wBAA8BqE,IAAI,CAACxC;AAAnC;AAAA;AAAA;AAAA;AAAA,oBAH9C;AAAA,aAAkFqC,KAAlF;AAAA;AAAA;AAAA;AAAA,kBADH;AADL;AAAA;AAAA;AAAA;AAAA,gBAD4C,eAW5C;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACI;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,SAAS,EAAC,eAA7B;AAA6C,YAAA,WAAW,EAAC,mBAAzD;AAA6E,YAAA,KAAK,EAAEpE,QAAQ,CAACM,OAA7F;AAAsG,YAAA,QAAQ,EAAE4C;AAAhH;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,SAAS,EAAC,aAAhC;AAA8C,YAAA,OAAO,EAAEK,gBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAX4C;AAAA;AAAA;AAAA;AAAA;AAAA,cA5CpD;AAAA;AAAA;AAAA;AAAA;AAAA,YADK,gBA+DL;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACI;AACI,QAAA,EAAE,EAAC,WADP;AAEI,QAAA,WAAW,EAAC,iBAFhB;AAGI,QAAA,IAAI,EAAC,UAHT;AAII,QAAA,KAAK,EAAEvD,QAAQ,CAACE,QAJpB;AAKI,QAAA,QAAQ,EAAEwD,cALd;AAMI,QAAA,MAAM,EAAC;AANX;AAAA;AAAA;AAAA;AAAA,cADJ,eASI;AACI,QAAA,IAAI,EAAC,UADT;AAEI,QAAA,WAAW,EAAC,qBAFhB;AAGI,QAAA,IAAI,EAAC,UAHT;AAII,QAAA,KAAK,EAAE1D,QAAQ,CAACG,QAJpB;AAKI,QAAA,QAAQ,EAAEwD,cALd;AAMI,QAAA,MAAM,EAAC;AANX;AAAA;AAAA;AAAA;AAAA,cATJ,eAiBI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAEC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAhER;AAAA;AAAA;AAAA;AAAA,UADJ;AAwFH,CAvSD;;GAAM1E,Q;;KAAAA,Q;AAySN,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\n\nvar stompClient = null;\n\nconst ChatRoom = () => {\n    const [privateChats, setPrivateChats] = useState(new Map());\n    const [groupChats, setGroupChats] = useState(new Map());\n    const [publicChats, setPublicChats] = useState([]);\n    const [userGroups, setUserGroups] = useState([]);\n    const [tab, setTab] = useState(\"CHATROOM\");\n    const [loggedIn, setLoggedIn] = useState(false);\n    const [userData, setUserData] = useState({\n        username: '',\n        password: '',\n        receivername: '',\n        connected: false,\n        content: '' // Changed from aaaa to content\n    });\n\n    const connect = useCallback((username) => {\n        let Sock = new SockJS('http://localhost:8080/ws');\n        stompClient = over(Sock);\n        stompClient.connect({}, () => onConnected(username), onError);\n    }, []);\n\n    useEffect(() => {\n        const savedUserData = JSON.parse(sessionStorage.getItem('userData'));\n        if (savedUserData) {\n            setUserData({ ...savedUserData });\n            setLoggedIn(true);\n            connect(savedUserData.username);\n            fetchUserGroups(savedUserData.username); // Fetch user groups when the user logs in\n        }\n    }, [connect]);\n\n    const fetchUserGroups = (username) => {\n        fetch(`http://localhost:8080/api/user/${username}/groups`)\n            .then(response => response.json())\n            .then(data => {\n                setUserGroups(data);\n            })\n            .catch(error => console.error('Error fetching user groups:', error));\n    };\n\n    const onConnected = (username) => {\n        setLoggedIn(true);\n        stompClient.subscribe('/chatroom/public', onMessageReceived);\n        stompClient.subscribe('/user/' + username + '/private', onPrivateMessage);\n        stompClient.subscribe('/group/' + username, onGroupMessage);\n        userJoin(username);\n    };\n\n    const userJoin = (username) => {\n        var chatMessage = {\n            senderName: username,\n            status: \"JOIN\"\n        };\n        stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n    };\n\n    const onMessageReceived = (payload) => {\n        var payloadData = JSON.parse(payload.body);\n        switch (payloadData.status) {\n            case \"JOIN\":\n                // Handle join message\n                break;\n            case \"MESSAGE\":\n                // Handle public chat message\n                setPublicChats(prevChats => [...prevChats, payloadData]);\n                break;\n            default:\n                console.log(`Unknown status: ${payloadData.status}`);\n                break;\n        }\n    };\n\n    const onPrivateMessage = (payload) => {\n        var payloadData = JSON.parse(payload.body);\n        updatePrivateChats(payloadData);\n    };\n\n    const onGroupMessage = (payload) => {\n        var payloadData = JSON.parse(payload.body);\n        switch (payloadData.status) {\n            case \"MESSAGE\":\n                // Handle group chat message\n                updateGroupChats(payloadData);\n                break;\n            default:\n                console.log(`Unknown status: ${payloadData.status}`);\n                break;\n        }\n    };\n\n    const updatePrivateChats = (message) => {\n        const senderName = message.senderName;\n        const newPrivateChats = new Map(privateChats);\n        if (newPrivateChats.get(senderName)) {\n            newPrivateChats.get(senderName).push(message);\n        } else {\n            newPrivateChats.set(senderName, [message]);\n        }\n        setPrivateChats(newPrivateChats);\n    };\n\n    const updateGroupChats = (message) => {\n        const groupName = message.groupName;\n        const newGroupChats = new Map(groupChats);\n        if (!newGroupChats.get(groupName)) {\n            newGroupChats.set(groupName, []);\n        }\n        newGroupChats.get(groupName).push(message);\n        setGroupChats(newGroupChats);\n    };\n\n    const onError = (err) => {\n        console.log(err);\n    };\n\n    const handleMessage = (event) => {\n        const { value } = event.target;\n        setUserData({ ...userData, content: value });\n    };\n\n    const sendValue = () => {\n        if (stompClient) {\n            var chatMessage = {\n                senderName: userData.username,\n                content: userData.content, // Set the value of content\n                status: \"MESSAGE\"\n            };\n\n            setPublicChats(prevChats => [...prevChats, chatMessage]);\n            setUserData({ ...userData, content: \"\" });\n            stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n        }\n    };\n\n    const sendPrivateValue = () => {\n        if (stompClient) {\n            var chatMessage = {\n                senderName: userData.username,\n                receiverName: tab,\n                content: userData.content, // Set the value of content\n                status: \"MESSAGE\"\n            };\n\n            const newPrivateChats = new Map(privateChats);\n            if (userData.username !== tab) {\n                if (newPrivateChats.get(tab)) {\n                    newPrivateChats.get(tab).push(chatMessage);\n                } else {\n                    newPrivateChats.set(tab, [chatMessage]);\n                }\n                setPrivateChats(newPrivateChats);\n            }\n\n            setUserData({ ...userData, content: \"\" });\n            stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n        }\n    };\n\n    const sendGroupValue = () => {\n        if (stompClient) {\n            var chatMessage = {\n                senderName: userData.username,\n                groupName: tab, // Add groupName to specify the receiving group\n                content: userData.content,\n                status: \"MESSAGE\"\n            };\n\n            stompClient.send(\"/app/group-message\", {}, JSON.stringify(chatMessage));\n\n            // Clear the message content after sending\n            setUserData({ ...userData, content: \"\" });\n        }\n    };\n\n    const handleUsername = (event) => {\n        const { value } = event.target;\n        setUserData({ ...userData, username: value });\n    };\n\n    const handlePassword = (event) => {\n        const { value } = event.target;\n        setUserData({ ...userData, password: value });\n    };\n\n    const login = () => {\n        fetch('http://localhost:8080/login', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ username: userData.username, password: userData.password }),\n        })\n            .then(response => response.text())\n            .then(data => {\n                if (data === \"Đăng nhập thành công!\") {\n                    sessionStorage.setItem('userData', JSON.stringify({ username: userData.username }));\n                    setLoggedIn(true);\n                    connect(userData.username);\n                } else {\n                    alert(data);\n                }\n            })\n            .catch((error) => {\n                console.error('Error:', error);\n            });\n    };\n\n    return (\n        <div className=\"container\">\n            {loggedIn ?\n                <div className=\"chat-box\">\n                    <div className=\"member-list\">\n                        <ul>\n                            <li onClick={() => { setTab(\"CHATROOM\") }} className={`member ${tab === \"CHATROOM\" && \"active\"}`}>Chatroom</li>\n                            {userGroups.map((group, index) => (\n                                <li onClick={() => { setTab(group.name) }} className={`member ${tab === group.name && \"active\"}`} key={index}>{group.name}</li>\n                            ))}\n                            {[...privateChats.keys()].map((name, index) => (\n                                <li onClick={() => { setTab(name) }} className={`member ${tab === name && \"active\"}`} key={index}>{name}</li>\n                            ))}\n                        </ul>\n                    </div>\n                    {tab === \"CHATROOM\" && <div className=\"chat-content\">\n                        <ul className=\"chat-messages\">\n                            {publicChats.map((chat, index) => (\n                                <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                                    {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\n                                    <div className=\"message-data\">{chat.content}</div> {/* Use content */}\n                                    {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\n                                </li>\n                            ))}\n                        </ul>\n\n                        <div className=\"send-message\">\n                            <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.content} onChange={handleMessage} />\n                            <button type=\"button\" className=\"send-button\" onClick={sendValue}>send</button>\n                        </div>\n                    </div>}\n                    {tab !== \"CHATROOM\" && groupChats.has(tab) && <div className=\"chat-content\">\n                        <ul className=\"chat-messages\">\n                            {[...(groupChats.get(tab) || [])].map((chat, index) => (\n                                <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                                    {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\n                                    <div className=\"message-data\">{chat.content}</div> {/* Use content */}\n                                    {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\n                                </li>\n                            ))}\n                        </ul>\n\n                        <div className=\"send-message\">\n                            <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.content} onChange={handleMessage} />\n                            <button type=\"button\" className=\"send-button\" onClick={sendGroupValue}>send</button>\n                        </div>\n                    </div>}\n                    {tab !== \"CHATROOM\" && privateChats.has(tab) && <div className=\"chat-content\">\n                        <ul className=\"chat-messages\">\n                            {[...(privateChats.get(tab) || [])].map((chat, index) => (\n                                <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                                    {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\n                                    <div className=\"message-data\">{chat.content}</div> {/* Use content */}\n                                    {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\n                                </li>\n                            ))}\n                        </ul>\n\n                        <div className=\"send-message\">\n                            <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.content} onChange={handleMessage} />\n                            <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>send</button>\n                        </div>\n                    </div>}\n                </div>\n                :\n                <div className=\"login\">\n                    <input\n                        id=\"user-name\"\n                        placeholder=\"Enter your name\"\n                        name=\"userName\"\n                        value={userData.username}\n                        onChange={handleUsername}\n                        margin=\"normal\"\n                    />\n                    <input\n                        type=\"password\"\n                        placeholder=\"Enter your password\"\n                        name=\"password\"\n                        value={userData.password}\n                        onChange={handlePassword}\n                        margin=\"normal\"\n                    />\n                    <button type=\"button\" onClick={login}>\n                        Login\n                    </button>\n                </div>}\n        </div>\n    );\n};\n\nexport default ChatRoom;\n"]},"metadata":{},"sourceType":"module"}